What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git creates a .git file in your directory, which stores versions of your folder/files in that directory.
You need to do this in order to keep track of versions of whatever files you decide to keep track of.





How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory and the repository in that it holds files you want to commit to your repository
from your working directory. The value that this offers is that you can choose which files from your working directory you want to add in
a single commit, as you may not want to add all your files at once, or maybe not add some at all.




How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to make sure you have one commit per logical change by using git add to add files you want to commit to
the staging area. Then you can use git commit to push these changes to the repository.





What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful in keeping my history of projects organized in several situations. One such situation would be if I wanted
to add a new feature to the system that I wouldn't want to effect the main branch as it would be some extensive changes and I would want
to keep the main branch as is incase the new change I was making didn't work out. I could also make multiple versions of, say, the same website
- for example, an english version of a website, as well as a vietnamese version.





How do the diagrams help you visualize the branch structure?

Diagrams help you visualize the branch structure as they help you see at a glance how each branch links back to the original commit.





What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together results in the merging of code between the two branches.
We represent it in the diagram the way we do because it can get complicated so representing it this way
helps to visualize the path of commit history.








What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging allows for quick and easy merging of two or even multiple branches, while doing it manually is slower, yet you have control over what can be merged and can reduce mistakes upfront by doing it manually.


